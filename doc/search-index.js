var searchIndex = new Map(JSON.parse('[["rust_git",{"t":"PPPFGPFPPPPPNNNNNNNNNNNNNONCCNNNNNNNNNNNNNNNHONNNNNNNNNNNNNNNCOOOOOOOOOOOOOOOOOOOOOOOCCCCCCCCCHHHHHHHHHHHHHHHHHHHHHHHCCCCCCFKNNMNONHHONMNNNNMNFFKNNNNMNHONHNNHHONNHHHOOMNOONNNNNNOMNIFNNNNNNNNONOHHNNNNHPPGPNNNHHNHNNNHHHHHHHHHHHPPPFPFGKNNNNNNMNNNNNNNOONNNNNNNOONNNOMNNNNNNNNNNNNMNCCCCSSHHHHHHHHHHHHHHHHHJHHHHHHHHHH","n":["Add","Branch","Checkout","Cli","Commands","Commit","CommonArgs","Init","Log","Merge","Rm","Status","augment_args","","augment_args_for_update","","augment_subcommands","augment_subcommands_for_update","borrow","","","borrow_mut","","","command","","command_for_update","commands","core","from","","","from_arg_matches","","","from_arg_matches_mut","","","group_id","","has_subcommand","into","","","main","path","try_from","","","try_into","","","type_id","","","update_from_arg_matches","","","update_from_arg_matches_mut","","","utils","verbose","branch","","cached","common","","","","","","","","","delete","files","","force","","initial_branch","message","name","recursive","target","add","branch","checkout","commit","init","log","merge","rm","status","add","add_core","register_entries","branch","checkout","checkout_to_commit","add_entry_to_tree","commit","commit_index","commit_merge","create_tree_for_path","hash_then_write_tree","delete_original_directory","init","log","print_commit","analyse_merge_conflict","merge","register_blob","register_blob_by_commit","remove","diff_index_entries_to_commit","status","blob","commit","index","object","reference","tree","Blob","BlobTrait","borrow","borrow_mut","calculate_hash","","data","from","get_blob_from_file","get_blob_type","hash","into","read_blob","","try_from","try_into","type_id","write_blob","","Commit","CommitData","CommitTrait","borrow","","borrow_mut","","calculate_hash","","check_has_uncommitted","data","default","diff_commit_to_commit","from","","get_merge_base","get_parent_commit_dis","hash","into","","is_prev_commit","is_prev_commit_search","merge_parent_commit_dis","message","parent_commits","read_commit","","time","tree_hash","try_from","","try_into","","type_id","","user","write_commit","","Index","IndexEntry","borrow","borrow_mut","clone","clone_into","clone_to_uninit","eq","from","hash","","into","path","read_index","register_files","to_owned","try_from","try_into","type_id","write_index","Blob","Commit","ObjectType","Tree","borrow","borrow_mut","from","get_object_path","get_object_type","into","read_object_file","try_from","try_into","type_id","write_object_file","create_head","get_all_heads","get_current_branch","get_current_commit","get_head","is_prev_branch","store_current_branch_commit","store_current_branch_ref","store_head","try_get_head","Bexe","Blob","Bsym","Tree","","TreeEntry","TreeEntryType","TreeTrait","borrow","","","borrow_mut","","","calculate_hash","","clone","","clone_into","","clone_to_uninit","","data","entry_type","eq","","from","","","hash","","","","into","","","name","read_tree","","to_owned","","try_from","","","try_into","","","type_id","","","write_tree","","hash","serialize","storage","utils","FOLDER_LENGTH","HASH_LENGTH","sha1","deserialize","serialize","clear_working_area","create_directory","create_file","create_nonexist_directory","create_nonexist_file","read_file","read_text_file","remove_file","remove_path","restore_index_by_tree","restore_tree","restore_working_area","write_file","write_text_file","PWD","get_git_directory","get_relative_path","get_time_string","get_username","is_subpath","pwd","relative_path","set_pwd","split_path_by_first","split_path_by_last"],"q":[[0,"rust_git"],[63,"rust_git::Commands"],[85,"rust_git::commands"],[94,"rust_git::commands::add"],[97,"rust_git::commands::branch"],[98,"rust_git::commands::checkout"],[100,"rust_git::commands::commit"],[106,"rust_git::commands::init"],[108,"rust_git::commands::log"],[110,"rust_git::commands::merge"],[114,"rust_git::commands::rm"],[115,"rust_git::commands::status"],[117,"rust_git::core"],[123,"rust_git::core::blob"],[142,"rust_git::core::commit"],[180,"rust_git::core::index"],[200,"rust_git::core::object"],[215,"rust_git::core::reference"],[225,"rust_git::core::tree"],[277,"rust_git::utils"],[281,"rust_git::utils::hash"],[284,"rust_git::utils::serialize"],[286,"rust_git::utils::storage"],[300,"rust_git::utils::utils"],[311,"clap_builder::builder::command"],[312,"clap_builder::parser::matches::arg_matches"],[313,"clap_builder"],[314,"core::result"],[315,"clap_builder::util::id"],[316,"core::option"],[317,"core::any"],[318,"alloc::string"],[319,"alloc::vec"],[320,"std::collections::hash::map"],[321,"std::collections::hash::set"],[322,"core::hash"],[323,"std::io::error"]],"i":"Ab00``0`00000jA`1022102102111``102102102102102`0102102102102102`0DlDnE`EbEd2EfEh65EjEl2468753268````````````````````````````````````````Cd0Cb111``110111101```CjC`10Ch2`21`21``221```110211212121102``Bd0000000000``0000`Db0`0000``0`000```````````Cf00`0```Bl1Bn120Df2313131213123131212311023123123123102``````````````````````````````````","f":"````````````{bb}00000{d{{d{c}}}{}}00{{{d{f}}}{{d{fc}}}{}}00{{}b}`0``{cc{}}00{{{d{h}}}{{n{jl}}}}{{{d{h}}}{{n{A`l}}}}{{{d{h}}}{{n{Abl}}}}{{{d{fh}}}{{n{jl}}}}{{{d{fh}}}{{n{A`l}}}}{{{d{fh}}}{{n{Abl}}}}{{}{{Af{Ad}}}}0{{{d{Ah}}}Aj}{{}c{}}00{{}Al}`{c{{n{e}}}{}{}}00{{}{{n{c}}}{}}00{dAn}00{{{d{fj}}{d{h}}}{{n{All}}}}{{{d{fA`}}{d{h}}}{{n{All}}}}{{{d{fAb}}{d{h}}}{{n{All}}}}{{{d{fj}}{d{fh}}}{{n{All}}}}{{{d{fA`}}{d{fh}}}{{n{All}}}}{{{d{fAb}}{d{fh}}}{{n{All}}}}`````````````````````````````````{{{Bb{B`}}Aj}Al}{{{d{{Bb{B`}}}}}{{Bj{{Bf{B`Bd}}{Bh{Bd}}{Bh{Bd}}{Bh{Bd}}}}}}{{{d{{Bb{B`}}}}}{{Bj{{Bh{Bd}}{Bh{B`}}}}}}{{{Af{{Bb{B`}}}}AjAj}Al}{{B`AjAjAj}Al}{{{d{Ah}}Aj}Al}{{{d{Bd}}{d{f{Bf{B`Bl}}}}{Af{{d{{Bf{B`Bn}}}}}}}Al}{{{d{{Bh{Bd}}}}B`B`B`{Bb{B`}}}B`}{{B`Aj}Al}{{{d{{Bh{Bd}}}}B`B`B`{Bb{B`}}{Bf{B`Bn}}}B`}{{{d{Ah}}{d{Ah}}{d{f{Bf{B`Bl}}}}}Al}{{{d{Ah}}{d{f{Bf{B`Bl}}}}}B`}{{{d{Ah}}}Al}{{{Af{B`}}}Al}{{}Al}{{{d{Ah}}{d{C`}}}Al}{{{d{Ah}}{d{Bn}}{d{Bn}}}Al}8{{{d{Ah}}{d{Ah}}{d{f{Bf{B`Bn}}}}{d{fAj}}}Al}{{{d{Ah}}{d{f{Bf{B`Bn}}}}}Al}{{{Bb{B`}}AjAjAj}Al}{{{d{{Bh{Bd}}}}{d{Ah}}}{{Bj{{Bh{Bd}}{Bh{Bd}}{Bh{{Bj{BdBd}}}}}}}}6````````{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{fCb}}}Al}{{{d{fCd}}}Al}`{cc{}}{{{d{Ah}}}Cd}{{{d{Ah}}}Cf}`{{}c{}}54{c{{n{e}}}{}{}}{{}{{n{c}}}{}}{dAn}87```::99{{{d{fCh}}}Al}{{{d{fCj}}}Al}{{}Aj}`{{}C`}{{{d{{Bf{B`Bn}}}}{d{{Bf{B`Bn}}}}}{{Bj{{Bf{B`Bn}}{Bf{B`Bn}}{Bf{B`Bn}}}}}};;{{{d{Ah}}{d{Ah}}}B`}{{{d{Ah}}}{{Bf{B`Cl}}}}`::{{{d{Ah}}{d{Ah}}}Aj}{{{d{Ah}}{d{Ah}}{d{f{Bh{B`}}}}}Aj}{{{Bf{B`Cl}}{Bf{B`Cl}}}{{Bf{B`Cl}}}}``98``<<;;::`98``{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Bd}}}Bd}{{d{d{fc}}}Al{}}{{dCn}Al}{{{d{Bd}}{d{Bd}}}Aj}{cc{}}{{{d{Bd}}{d{fc}}}AlD`}`{{}c{}}`{{}{{Bf{B`Bd}}}}{{{d{Ah}}{d{Ah}}{d{f{Bh{Bd}}}}{d{Aj}}}Al}{dc{}}{c{{n{e}}}{}{}}{{}{{n{c}}}{}}{dAn}{{{d{{Bf{B`Bd}}}}}Al}````?>9{{{d{Ah}}}B`}{{{d{Ah}}}Db}91543{{{d{Ah}}{d{Ah}}}Al}0{{}{{Bb{B`}}}}{{}{{Af{B`}}}}{{}B`}5{{{d{Ah}}{d{Ah}}}Aj}{{{d{Ah}}}Al}05{{{d{Ah}}}{{n{B`Dd}}}}````````{d{{d{c}}}{}}00{{{d{f}}}{{d{fc}}}{}}00{{{d{fDf}}}Al}{{{d{fBl}}}Al}{{{d{Cf}}}Cf}{{{d{Bn}}}Bn}{{d{d{fc}}}Al{}}0{{dCn}Al}0``{{{d{Cf}}{d{Cf}}}Aj}{{{d{Bn}}{d{Bn}}}Aj}{cc{}}00{{{d{Cf}}{d{fc}}}AlD`}{{{d{Bn}}{d{fc}}}AlD`}``{{}c{}}00`;:{dc{}}0{c{{n{e}}}{}{}}00{{}{{n{c}}}{}}00{dAn}00?>``````{{{d{{Dh{Cn}}}}}B`}{{{d{Ah}}}{{Bb{Cn}}}}1{{}Al}{{{d{Ah}}}Al}000{{{d{Ah}}}{{n{{Bb{Cn}}Dd}}}}{{{d{Ah}}}{{n{B`Dd}}}}2{{{d{Ah}}Aj}Al}{{{d{Ah}}{d{Ah}}{d{f{Bf{B`Bd}}}}}Al}{{{d{Ah}}{d{Ah}}}Al}5{{{d{Ah}}{d{{Dh{Cn}}}}}{{Dj{Al}}}}{{{d{Ah}}{d{Ah}}}{{Dj{Al}}}}`{{}B`}{{{d{Ah}}{d{Ah}}}B`}11{{{d{Ah}}{d{Ah}}}Aj}21:{{{d{Ah}}}{{Bj{B`B`}}}}0","D":"ADh","p":[[5,"Command",311],[1,"reference",null,null,1],[0,"mut"],[5,"ArgMatches",312],[5,"Cli",0],[8,"Error",313],[6,"Result",314,null,1],[5,"CommonArgs",0],[6,"Commands",0],[5,"Id",315],[6,"Option",316,null,1],[1,"str"],[1,"bool"],[1,"unit"],[5,"TypeId",317],[5,"String",318],[5,"Vec",319],[5,"IndexEntry",180],[5,"HashMap",320],[5,"HashSet",321],[1,"tuple",null,null,1],[5,"Tree",225],[5,"TreeEntry",225],[5,"CommitData",142],[10,"BlobTrait",123],[5,"Blob",123],[6,"TreeEntryType",225],[10,"CommitTrait",142],[5,"Commit",142],[1,"i32"],[1,"u8"],[10,"Hasher",322],[6,"ObjectType",200],[5,"Error",323],[10,"TreeTrait",225],[1,"slice"],[8,"Result",323],[15,"Checkout",63],[15,"Merge",63],[15,"Rm",63],[15,"Init",63],[15,"Add",63],[15,"Commit",63],[15,"Branch",63],[15,"Status",63],[15,"Log",63]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAJMAHwAEAAEABwAAAA0AEAAhAAgALQAAAC8ADwBDAAgAfQADAIIAAACGAAAAiAAAAIoAAwCRAAUAmQABAKAAAACmAAIAqgAJALcABQC+AAAAxAADAMkAAQDMAAIA1AACAOIAAgDmAAAA6QAHAPIACQD/AAMABgEBAAkBCwAtAQAA","P":[[18,"T"],[24,""],[29,"T"],[32,""],[41,"U"],[44,""],[46,"U,T"],[49,"U"],[52,""],[125,"T"],[127,""],[130,"T"],[131,""],[134,"U"],[135,""],[137,"U,T"],[138,"U"],[139,""],[145,"T"],[149,""],[155,"T"],[157,""],[160,"U"],[162,""],[171,"U,T"],[173,"U"],[175,""],[182,"T"],[184,""],[185,"T"],[186,""],[188,"T"],[189,"__H"],[191,"U"],[193,""],[195,"T"],[196,"U,T"],[197,"U"],[198,""],[204,"T"],[207,""],[209,"U"],[210,""],[211,"U,T"],[212,"U"],[213,""],[233,"T"],[239,""],[243,"T"],[245,""],[251,"T"],[254,"__H"],[258,"U"],[262,""],[264,"T"],[266,"U,T"],[269,"U"],[272,""]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[9106]}
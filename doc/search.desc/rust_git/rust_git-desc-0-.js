searchState.loadedDescShard("rust_git", 0, "A version control system implementing a subset features of …\nAdd file(s) to the index (staging area)\nCreate, list, or delete branches\nSwitch to another branch\nCommit staged changes\nInitialize a new Git repository\nDisplays the log of commits\nMerge the specified branch into the current one\nRemove file(s) from the index\nDisplays paths that have differences between the index …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWorking directory path\nPrint verbose information\nCreate a new branch and checkout\nBranch to merge from\nOnly remove cached files (in staging area).\nDelete the specified branch\nList of files to add\nList of files to remove\nForce checkout even there are uncommited changes.\nForce merge even there are uncommited changes.\nUse the specified name for the initial branch in the newly …\nCommit message\nBranch name (if omitted, list branches)\nAllow recursive removal when a leading directory name is …\nTarget branch name\nModule: add\nModule: branch\nModule: checkout\nModule: commit\nModule: init\nModule: log\nModule: merge\nModule: rm\nModule: status\nAdds the specified files or directories to the index.\nCore logic for adding files to the index.\nRecursively registers files from the given paths into a …\nManages Git branches: create, delete, or list branches …\nSwitches to the specified branch or commit.\nRestores the working area and index from the specified …\nAdds an index entry (file) into the appropriate tree based …\nCreates a new commit object with the given entries, …\nCommits the current index with a provided message.\nCreates a new merge commit using a precomputed blob table …\nRecursively creates tree objects for the directory …\nRecursively hashes and writes all trees starting from the …\nRemoves the existing <code>.git</code> directory if it exists.\nInitializes a new Git repository in the current working …\nDisplays the commit history of the current branch in a …\nPrints detailed information about a single commit to …\nAnalyzes and prints detailed conflict information between …\nMerges the specified branch into the current branch.\nRecursively registers all blobs under a given tree into a …\nRegisters all blobs from a commit’s tree into the blob …\nRemoves files from the working directory and/or index …\nCompares the given index entries with the contents of a …\nDisplays the current status of the working directory and …\nModule: blob\nModule: commit\nModule: index\nModule: object\nModule: reference\nModule: tree\nRepresents a Git blob object, which stores file content.\nComputes the SHA-1 hash for the blob’s content.\nReturns the argument unchanged.\nConstructs a <code>Blob</code> object from a file path.\nDetermines the type of the blob based on the file system …\nCalls <code>U::from(self)</code>.\nReads the blob object from storage and populates <code>self.data</code>.\nSerializes and writes the blob to storage.\nRepresents a Git commit object, which stores file content.\nStruct holding all metadata associated with a commit.\nComputes the SHA-1 hash for the commit’s content.\nChecks if there are any uncommitted changes in either the …\nCompares two sets of blobs (file snapshots) and returns …\nReturns the argument unchanged.\nReturns the argument unchanged.\nFinds the lowest common ancestor (merge base) of two …\nComputes the shortest distance (in number of commits) from …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines whether <code>prev_commit_hash</code> is an ancestor of …\nRecursively determines whether <code>prev_commit_hash</code> is an …\nMerges two ancestor distance maps and returns a map of …\nReads the commit object from storage and populates …\nSerializes and writes the commit to storage.\nType alias for the index (staging area), mapping file path …\nRepresents a file entry in the staging index.\nReturns the argument unchanged.\nHash (blob ID) of the file content\nCalls <code>U::from(self)</code>.\nRelative file path\nReads and parses the <code>.git/index</code> file into an in-memory …\nRecursively (if enabled) registers files into the index …\nSerializes and writes the given <code>Index</code> into <code>.git/index</code>.\nEnum representing the type of a Git object.\nReturns the argument unchanged.\nReturns the full file path of a Git object in the …\nDetermines the type of the Git object (Blob, Tree, or …\nCalls <code>U::from(self)</code>.\nReads the content of a Git object file.\nWrites content to a Git object file if it does not already …\nCreates a new branch reference pointing to a given commit.\nLists all available local branch names.\nGets the name of the currently checked-out branch, if any.\nResolves the current commit hash pointed to by <code>.git/HEAD</code>.\nReads the commit hash pointed to by a specific branch head.\nChecks whether one branch is an ancestor of another.\nSets <code>.git/HEAD</code> directly to a commit hash (detached HEAD …\nUpdates <code>.git/HEAD</code> to point to a specific branch.\nStores a commit hash into a branch reference file.\nAttempts to read the commit hash from a branch head …\nRepresents a Git tree object.\nRepresents a single entry within a Git tree object.\nRepresents the type of a tree entry in Git.\nComputes and sets the SHA-1 hash of the tree based on its …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads the tree content from the Git object store into …\nSerializes and writes the current tree’s data to the Git …\nModule: hash\nModule: serialize\nModule: storage\nModule: utils\nThe length (in characters) used for the first level of …\nThe length (in characters) of a hexadecimal-encoded SHA-1 …\nComputes the SHA-1 hash of the provided byte slice and …\nDeserializes a base64-encoded string back into raw bytes.\nSerializes a byte slice into a base64-encoded string.\nClears the working area by removing all tracked files from …\nCreates a directory and all required parent directories.\nCreates a new file at the specified path.\nCreates a directory only if it does not already exist.\nCreates a file only if it does not already exist.\nReads the contents of a file into a byte vector.\nReads the contents of a text file into a String.\nDeletes a file at the specified path.\nRemoves a file or directory (optionally recursively).\nRecursively builds an index by restoring a tree and …\nRecursively restores a tree object into the file system.\nRestores the working directory from a given commit’s …\nWrites a byte slice to a file, creating parent directories …\nWrites a string to a text file, creating parent …\nLocates and returns the absolute path to the <code>.git</code> …\nReturns the relative path from <code>parent_path</code> to <code>path</code>.\nReturns the current local timestamp formatted as a string.\nReturns the current user’s username from environment …\nChecks whether one path is a subpath of another.\nReturns the current working directory (PWD).\nReturns the relative path from the <code>parent</code> to the <code>child</code>.\nSets the current working directory (PWD) to the absolute …\nSplits a path into the first component and the rest.\nSplits a path into everything except the last component …")